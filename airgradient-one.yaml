# AirGradient ONE - Board v9
# https://www.airgradient.com/open-airgradient/instructions/overview/

# Needs ESPHome 2023.7.0 or later

substitutions:
  devicename: "airgradient-one"
  upper_devicename: "AirGradient ONE"
  ag_esphome_config_version: 0.10.0

esphome:
  name: "${devicename}"
  friendly_name: "${upper_devicename}"
  name_add_mac_suffix: false  # Set to false if you don't want part of the MAC address in the name


esp32:
  board: esp32-c3-devkitm-1

# web_server:  # Please note that enabling this component will take up a lot of memory and may decrease stability, especially on ESP8266.
# Creates a simple web server on the node that can be accessed through any browser
# https://esphome.io/components/web_server.html
#web_server:
#  port: 80
#  include_internal: true

# Serial logging must share UART with one of the sensors. 
# Stock firmware has this feature, but it is broken (not supported?) in ESPHome.
# Disable to avoid issues
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

ota:

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      hidden: !secret hidden_ssid
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:

# The captive portal is a fallback mechanism for when connecting to the configured WiFi fails.
# https://esphome.io/components/captive_portal.html
captive_portal:

http_request:
  # Used to support POST request to send data to AirGradient
  # https://esphome.io/components/http_request.html

switch:
  # Create a switch for safe_mode in order to flash the device
  # Solution from this thread:
  # https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
  - platform: safe_mode
    name: "Flash Mode (Safe Mode)"
    icon: "mdi:cellphone-arrow-down"

  - platform: template
    name: "Display Temperature in °F"
    icon: "mdi:thermometer"
    id: display_in_f
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True
  
  - platform: template
    name: "Display AQI"
    icon: "mdi:air-filter"
    id: display_aqi
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True
  
  - platform: template
    name: "OLED"
    icon: "mdi:television"
    id: oled
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True
    turn_on_action:
      - display.page.show: combo
    turn_off_action:
      - display.page.show: blank

  - platform: template
    name: "SenseAir S8 Automatic Calibration"
    icon: "mdi:tune"
    id: s8_abc
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: True
    turn_on_action:
      - senseair.abc_enable: senseair_s8
    turn_off_action:
      - senseair.abc_disable: senseair_s8

button:
  # https://github.com/esphome/issues/issues/2444
  - platform: template
    name: Force SenseAir S8 Calibration
    id: senseair_s8_calibrate_button
    on_press:
      then:
        - senseair.background_calibration: senseair_s8
        - delay: 70s
        - senseair.background_calibration_result: senseair_s8

light:
    # https://esphome.io/components/light/esp32_rmt_led_strip.html
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO10  # Pin 16
    num_leds: 11
    rmt_channel: 0
    chipset: ws2812
    name: "LED Strip"
    id: led_strip
    restore_mode: RESTORE_DEFAULT_OFF

number:
    # https://esphome.io/components/number/template.html
  - platform: template
    name: "LED Brightness %"
    icon: "mdi:lightbulb"
    id: led_brightness
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 100
    optimistic: true
    restore_value: true
    mode: slider

uart:
  # https://esphome.io/components/uart.html#uart
  - rx_pin: GPIO0  # Pin 12
    tx_pin: GPIO1  # Pin 13
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: GPIO20  # Pin 30 or RX
    tx_pin: GPIO21  # Pin 31 or TX
    baud_rate: 9600
    id: pms5003_uart

i2c:
  # https://esphome.io/components/i2c.html
  sda: GPIO7
  scl: GPIO6
  frequency: 400kHz  # 400kHz eliminates warnings about components taking a long time other than SGP40 component: https://github.com/esphome/issues/issues/4717

sensor:
  - platform: sht4x
    # SHT40 https://esphome.io/components/sensor/sht4x.html
    temperature:
      name: "Temperature"
      id: temp
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44

  - platform: sgp4x
    # SGP41 https://esphome.io/components/sensor/sgp4x.html
    voc:
      name: "VOC Index"
      id: voc
    nox:
      name: "NOx Index"
      id: nox
    compensation:  # Remove this block if no temp/humidity sensor present for compensation
      temperature_source: temp
      humidity_source: humidity

    # Default interval of updating every second, but using an average over the last 30 seconds/readings
  - platform: pmsx003
    # PMS5003 https://esphome.io/components/sensor/pmsx003.html
    type: PMSX003
    uart_id: pms5003_uart
    update_interval: 300s # extend lifetime of laser by activating it only every 5 mintues
    pm_1_0:
      id: pm_1_0
      name: "Particulate Matter <1.0µm Concentration"
    pm_2_5:
      id: pm_2_5
      name: "Particulate Matter <2.5µm Concentration"
    pm_10_0:
      id: pm_10
      name: "Particulate Matter <10.0µm Concentration"
    pm_0_3um:
      id: pm_0_3um
      icon: mdi:blur
      name: "Particulate Matter >0.3µm Count"
    pm_0_5um:
      id: pm_0_5um
      icon: mdi:blur
      name: "Particulate Matter >0.5µm Count"
    pm_1_0um:
      id: pm_1_0um
      icon: mdi:blur
      name: "Particulate Matter >1.0µm Count"
    pm_2_5um:
      id: pm_2_5um
      icon: mdi:blur
      name: "Particulate Matter >2.5µm Count"
    pm_5_0um:
      id: pm_5_0um
      icon: mdi:blur
      name: "Particulate Matter >5.0µm Count"
    pm_10_0um:
      id: pm_10_0um
      icon: mdi:blur
      name: "Particulate Matter >10.0µm Count"

  # Internal AQI calculations
  - platform: template
    id: pm_2_5_24havg
    lambda: |-
      return id(pm_2_5).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 1440  # = 24 hours x 60 minutes
          send_every: 1
  - platform: template
    id: pm_2_5_aqi
    update_interval: 60s
    accuracy_decimals: 0
    lambda: |-
      if (isnan(id(pm_2_5_24havg).raw_state)){
        return NAN;
      } else if (id(pm_2_5_24havg).state <= 12.0) {
        return((50.0 / 12.0) * id(pm_2_5_24havg).state);
      } else if (id(pm_2_5_24havg).state <= 35.4) {
        return((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5_24havg).state - 12.1) + 51.0);
      } else if (id(pm_2_5_24havg).state <= 55.4) {
        return((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5_24havg).state - 35.5) + 101.0);
      } else if (id(pm_2_5_24havg).state <= 150.4) {
        return((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5_24havg).state - 55.5) + 151.0);
      } else if (id(pm_2_5_24havg).state <= 250.4) {
        return((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5_24havg).state - 150.5) + 201.0);
      } else if (id(pm_2_5_24havg).state <= 350.4) {
        return((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5_24havg).state - 250.5) + 301.0);
      } else if (id(pm_2_5_24havg).state <= 500.4) {
        return((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5_24havg).state - 350.5) + 401.0);
      } else {
        return(500);
      }
  
  - platform: template
    id: pm_10_24avg
    lambda: |-
      return id(pm_10).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 1440  # = 24 hours x 60 minutes
          send_every: 1
  - platform: template
    id: pm10_aqi
    update_interval: 60s
    accuracy_decimals: 0
    lambda: |-
      if (isnan(id(pm_10_24avg).raw_state)){
        return NAN;
      } else if (id(pm_10_24avg).state <= 54) {
        return((50 / 54) * id(pm_10_24avg).state);
      } else if (id(pm_10_24avg).state <= 35.4) {
        return((100 - 51) / (154 - 55) * (id(pm_10_24avg).state - 55) + 51);
      } else if (id(pm_10_24avg).state <= 55.4) {
        return((150 - 101) / (254 - 155) * (id(pm_10_24avg).state - 155) + 101);
      } else if (id(pm_10_24avg).state <= 150.4) {
        return((200 - 151) / (354 - 255) * (id(pm_10_24avg).state - 255) + 151);
      } else if (id(pm_10_24avg).state <= 250.4) {
        return((300 - 201) / (424 - 355) * (id(pm_10_24avg).state - 355) + 201);
      } else if (id(pm_10_24avg).state <= 350.4) {
        return((400 - 301) / (504 - 425) * (id(pm_10_24avg).state - 425) + 301);
      } else if (id(pm_10_24avg).state <= 500.4) {
        return((500 - 401) / (604 - 505) * (id(pm_10_24avg).state - 505) + 401);
      } else {
        return(500);
      }

  # Select dominant AQI to publish
  - platform: template
    name: "AQI"
    id: epa_aqi
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    lambda: |-
      if (id(pm_2_5_aqi).state > id(pm10_aqi).state) {
        return id(pm_2_5_aqi).state;
      } else {
        return id(pm10_aqi).state;
      }
    update_interval: 60s


  - platform: senseair
    # SenseAir S8 https://esphome.io/components/sensor/senseair.html
    # https://senseair.com/products/size-counts/s8-lp/
    co2:
      name: "CO2"
      id: co2
      filters:
        - skip_initial: 2
      on_value:
        - if:
            condition:
              light.is_on: led_strip
            then:
              - if:
                  condition:
                    lambda: 'return id(co2).state < 800;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 0%
                        green: 100%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(co2).state >= 800 && id(co2).state < 1000;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 100%
                        green: 100%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(co2).state >= 1000 && id(co2).state < 1500;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 100%
                        green: 70%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(co2).state >= 1500 && id(co2).state < 2000;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 100%
                        green: 0%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(co2).state >= 2000 && id(co2).state < 3000;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 60%
                        green: 0%
                        blue: 60%
              - if:
                  condition:
                    lambda: 'return id(co2).state >= 3000 && id(co2).state < 10000;'
                  then:
                    - light.turn_on:
                        id: led_strip
                        brightness: !lambda 'return id(led_brightness).state / 100.0;'
                        red: 40%
                        green: 0%
                        blue: 0%
    id: senseair_s8
    uart_id: senseair_s8_uart

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_dbm
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    id: device_uptime
    update_interval: 1s

font:
    # Font to use on the display
  - file: "fonts/t0-12-uni.bdf"
    id: t0_12
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'
  - file: "fonts/t0-16-uni.bdf"
    id: t0_16
  - file: "fonts/t0-22b-uni.bdf"
    id: t0_22b

display:
    # https://esphome.io/components/display/ssd1306.html
    # Formatting reference: https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled_display
    address: 0x3C
    # rotation: 180°
    pages:
      - id: boot
        lambda: |-
          it.printf(0, 0, id(t0_16), "$upper_devicename");
          it.printf(0, 22, id(t0_16), "MAC:");
          it.printf(128, 22, id(t0_16), TextAlign::TOP_RIGHT, "%s", get_mac_address().c_str());
          it.printf(0, 45, id(t0_16), "Firmware v$ag_esphome_config_version");
      - id: combo
        lambda: |-
          if (id(display_in_f).state) {
            it.printf(0, 0, id(t0_16), "%.1f°F", id(temp).state*9/5+32);
          } else {
            it.printf(0, 0, id(t0_16), "%.1f°C", id(temp).state);
          }
          it.printf(128, 0, id(t0_16), TextAlign::TOP_RIGHT, "%.1f%%", id(humidity).state);

          it.line(0, 14, 128, 14);

          it.printf(0, 19, id(t0_12), "CO2");
          if (id(co2).state > 0) {
            it.printf(0, 30, id(t0_22b), "%.0f", id(co2).state);
          } else {
            it.printf(0, 30, id(t0_22b), "-");
          }
          it.printf(0, 53, id(t0_12), "ppm");

          it.line(49, 16, 49, 64);

          if (id(display_aqi).state) {
            it.printf(52, 19, id(t0_12), "AQI");
            if (id(epa_aqi).state >= 0) {
              it.printf(52, 30, id(t0_22b), "%.0f", id(epa_aqi).state);
            } else {
              it.printf(52, 30, id(t0_22b), "-");
            }
          } else {
            it.printf(52, 19, id(t0_12), "PM2.5");
            if (id(pm_2_5).state >= 0) {
              it.printf(52, 30, id(t0_22b), "%.0f", id(pm_2_5).state);
            } else {
              it.printf(52, 30, id(t0_22b), "-");
            }
            it.printf(52, 53, id(t0_12), "µg/m³");
          }

          it.line(89, 16, 89, 64);

          it.printf(92, 19, id(t0_12), "TVOC:");
          if (id(voc).state >= 0) {
            it.printf(92, 31, id(t0_12), "%.0f", id(voc).state);
          } else {
            it.printf(92, 31, id(t0_12), "-");
          }

          it.printf(92, 43, id(t0_12), "NOx:");
          if (id(nox).state >= 0) {
            it.printf(92, 55, id(t0_12), "%.0f", id(nox).state);
          } else {
            it.printf(92, 55, id(t0_12), "-");
          }

      - id: blank
        lambda: |-
          it.printf(0, 0, id(t0_12), "");

output:
    # Pin to notify external watchdog that activity is present
  - platform: gpio
    id: watchdog
    pin: GPIO2

interval:
  - interval: 30s
    # Notify watchdog device is still alive
    then:
      - output.turn_on: watchdog
      - delay: 20ms
      - output.turn_off: watchdog

  - interval: 5s
    then:
      - if:
          # Show boot screen for first 10 seconds with serial number and config version
          condition:
              lambda: 'return id(device_uptime).state < 10;'
          then:
            - display.page.show: boot
          else:
            if:
              condition:
                switch.is_on: oled
              then:
                - display.page.show: combo
                - component.update: oled_display
              else:
                - display.page.show: blank
                - component.update: oled_display
